public class NQueens {

    private static boolean isSafe(int row, int col, int[][] board) {
        // Check for conflicts in the same row
        for (int i = 0; i < board.length; i++) {
            if (board[row][i] == 1 && i != col) {
                return false;
            }
        }

        // Check for conflicts in the same column
        for (int i = 0; i < board.length; i++) {
            if (board[i][col] == 1 && i != row) {
                return false;
            }
        }

        // Check for conflicts in diagonals
        int i = row, j = col;
        while (i >= 0 && j >= 0) {
            if (board[i][j] == 1) {
                return false;
            }
            i--;
            j--;
        }

        i = row;
        j = col;
        while (i < board.length && j < board.length) {
            if (board[i][j] == 1) {
                return false;
            }
            i++;
            j++;
        }

        return true;
    }

    private static boolean solveNQueens(int row, int[][] board) {
        if (row == board.length) {
            // A solution is found
            return true;
        }

        for (int col = 0; col < board.length; col++) {
            if (isSafe(row, col, board)) {
                board[row][col] = 1;

                if (solveNQueens(row + 1, board)) {
                    return true;
                }

                board[row][col] = 0; // Backtrack
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int n = 4; // Number of queens
        int[][] board = new int[n][n];

        if (!solveNQueens(0, board)) {
            System.out.println("No solution exists for " + n + " queens");
        } else {
            printSolution(board);
        }
    }

    private static void printSolution(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}

Sample output:
1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1


